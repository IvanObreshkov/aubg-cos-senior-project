syntax = "proto3";

package raft;

// The go_package option in Protocol Buffers specifies the Go import path for the generated Go code from this protobuf
// file.
// https://stackoverflow.com/questions/66321215/what-is-the-go-package-option-used-for-in-a-protocol-buffer-file
option go_package = "aubg-cos-senior-project/internal/raft/transport";


// RequestVote RPC arguments as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message RequestVoteRequest {
  // candidate's term
  uint64 term = 1;
  // candidate requesting vote
  string candidate_id = 2;
  // index of candidate's last log entry (Section 5.4)
  uint64 last_log_index = 3;
  // term of candidate's last log entry (Section 5.4)
  uint64 last_log_term = 4;
}

// RequestVote RPC response as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message RequestVoteResponse {
  // currentTerm, for candidate to update itself
  uint64 term = 1;
  // true means candidate received vote
  bool vote_granted = 2;
}

// AppendEntries RPC arguments as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message AppendEntriesRequest {
  // leader's term
  uint64 term = 1;
  // so follower can redirect clients
  string leader_id = 2;
  // index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;
  // term of prev_log_index entry
  uint64 prev_log_term = 4;
  // log entries to store (empty for heartbeat; may send more than one for efficiency)
  repeated LogEntry entries = 5;
  // leader's commit_index
  uint64 leader_commit = 6;
}

// AppendEntries RPC response as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message AppendEntriesResponse {
  // currentTerm, for leader to update itself
  uint64 term = 1;
  // true if follower contained entry matching prev_log_index and prev_log_term
  bool success = 2;
}

// Log entry as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message LogEntry {
  // term when entry was received by leader
  uint64 term = 1;
  // command for state machine
  bytes command = 2;
  // index of the entry in the log
  uint64 index = 3;
}


// A contract between the gRPC Sever and Client
service RaftService {
  // RequestVote RPC (Section 5.2 from the [Raft paper](https://raft.github.io/raft.pdf))
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  // AppendEntries RPC (Section 5.3 from the [Raft paper](https://raft.github.io/raft.pdf))
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}
