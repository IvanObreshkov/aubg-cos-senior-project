// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: internal/raft/proto/raft.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of log entry
type LogEntryType int32

const (
	// Regular command for state machine
	LogEntryType_LOG_COMMAND LogEntryType = 0
	// Configuration change entry (Section 6)
	LogEntryType_LOG_CONFIGURATION LogEntryType = 1
)

// Enum value maps for LogEntryType.
var (
	LogEntryType_name = map[int32]string{
		0: "LOG_COMMAND",
		1: "LOG_CONFIGURATION",
	}
	LogEntryType_value = map[string]int32{
		"LOG_COMMAND":       0,
		"LOG_CONFIGURATION": 1,
	}
)

func (x LogEntryType) Enum() *LogEntryType {
	p := new(LogEntryType)
	*p = x
	return p
}

func (x LogEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_raft_proto_raft_proto_enumTypes[0].Descriptor()
}

func (LogEntryType) Type() protoreflect.EnumType {
	return &file_internal_raft_proto_raft_proto_enumTypes[0]
}

func (x LogEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEntryType.Descriptor instead.
func (LogEntryType) EnumDescriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{0}
}

// Status of a configuration change operation
type ConfigChangeStatus int32

const (
	// Configuration change succeeded
	ConfigChangeStatus_OK ConfigChangeStatus = 0
	// Not the leader, cannot process configuration change
	ConfigChangeStatus_NOT_LEADER ConfigChangeStatus = 1
	// Configuration change already in progress
	ConfigChangeStatus_IN_PROGRESS ConfigChangeStatus = 2
	// Configuration change timeout
	ConfigChangeStatus_TIMEOUT ConfigChangeStatus = 3
)

// Enum value maps for ConfigChangeStatus.
var (
	ConfigChangeStatus_name = map[int32]string{
		0: "OK",
		1: "NOT_LEADER",
		2: "IN_PROGRESS",
		3: "TIMEOUT",
	}
	ConfigChangeStatus_value = map[string]int32{
		"OK":          0,
		"NOT_LEADER":  1,
		"IN_PROGRESS": 2,
		"TIMEOUT":     3,
	}
)

func (x ConfigChangeStatus) Enum() *ConfigChangeStatus {
	p := new(ConfigChangeStatus)
	*p = x
	return p
}

func (x ConfigChangeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigChangeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_raft_proto_raft_proto_enumTypes[1].Descriptor()
}

func (ConfigChangeStatus) Type() protoreflect.EnumType {
	return &file_internal_raft_proto_raft_proto_enumTypes[1]
}

func (x ConfigChangeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigChangeStatus.Descriptor instead.
func (ConfigChangeStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{1}
}

// RequestVote RPC arguments as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
type RequestVoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// candidate's term
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// candidate requesting vote
	CandidateId string `protobuf:"bytes,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	// index of candidate's last log entry (Section 5.4)
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	// term of candidate's last log entry (Section 5.4)
	LastLogTerm   uint64 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteRequest) Reset() {
	*x = RequestVoteRequest{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteRequest) ProtoMessage() {}

func (x *RequestVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteRequest.ProtoReflect.Descriptor instead.
func (*RequestVoteRequest) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{0}
}

func (x *RequestVoteRequest) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteRequest) GetCandidateId() string {
	if x != nil {
		return x.CandidateId
	}
	return ""
}

func (x *RequestVoteRequest) GetLastLogIndex() uint64 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *RequestVoteRequest) GetLastLogTerm() uint64 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

// RequestVote RPC response as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
type RequestVoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// currentTerm, for candidate to update itself
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// true means candidate received vote
	VoteGranted   bool `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteResponse) Reset() {
	*x = RequestVoteResponse{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteResponse) ProtoMessage() {}

func (x *RequestVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteResponse.ProtoReflect.Descriptor instead.
func (*RequestVoteResponse) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{1}
}

func (x *RequestVoteResponse) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteResponse) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

// AppendEntries RPC arguments as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
type AppendEntriesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// leader's term
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// so follower can redirect clients
	LeaderId string `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	// index of log entry immediately preceding new ones
	PrevLogIndex uint64 `protobuf:"varint,3,opt,name=prev_log_index,json=prevLogIndex,proto3" json:"prev_log_index,omitempty"`
	// term of prev_log_index entry
	PrevLogTerm uint64 `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm,proto3" json:"prev_log_term,omitempty"`
	// log entries to store (empty for heartbeat; may send more than one for efficiency)
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// leader's commit_index
	LeaderCommit  uint64 `protobuf:"varint,6,opt,name=leader_commit,json=leaderCommit,proto3" json:"leader_commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesRequest) Reset() {
	*x = AppendEntriesRequest{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesRequest) ProtoMessage() {}

func (x *AppendEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesRequest.ProtoReflect.Descriptor instead.
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{2}
}

func (x *AppendEntriesRequest) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesRequest) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if x != nil {
		return x.PrevLogIndex
	}
	return 0
}

func (x *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if x != nil {
		return x.PrevLogTerm
	}
	return 0
}

func (x *AppendEntriesRequest) GetEntries() []*LogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *AppendEntriesRequest) GetLeaderCommit() uint64 {
	if x != nil {
		return x.LeaderCommit
	}
	return 0
}

// AppendEntries RPC response as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
type AppendEntriesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// currentTerm, for leader to update itself
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// true if follower contained entry matching prev_log_index and prev_log_term
	Success       bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesResponse) Reset() {
	*x = AppendEntriesResponse{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesResponse) ProtoMessage() {}

func (x *AppendEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesResponse.ProtoReflect.Descriptor instead.
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{3}
}

func (x *AppendEntriesResponse) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Log entry as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
type LogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// term when entry was received by leader
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// command for state machine
	Command []byte `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// index of the entry in the log
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// type of log entry (command, configuration, etc.)
	Type LogEntryType `protobuf:"varint,4,opt,name=type,proto3,enum=proto.LogEntryType" json:"type,omitempty"`
	// configuration data (only populated when type is LOG_CONFIGURATION)
	Configuration *Configuration `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{4}
}

func (x *LogEntry) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntry) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *LogEntry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LogEntry) GetType() LogEntryType {
	if x != nil {
		return x.Type
	}
	return LogEntryType_LOG_COMMAND
}

func (x *LogEntry) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Server configuration entry (Section 6: Cluster membership changes)
type ServerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique server identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// network address of the server
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{5}
}

func (x *ServerConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Cluster configuration (Section 6: Cluster membership changes)
type Configuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of servers in the configuration
	Servers []*ServerConfig `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	// Whether this is a joint consensus configuration (C_old,new)
	IsJoint bool `protobuf:"varint,2,opt,name=is_joint,json=isJoint,proto3" json:"is_joint,omitempty"`
	// If is_joint is true, this contains the old configuration servers
	OldServers    []*ServerConfig `protobuf:"bytes,3,rep,name=old_servers,json=oldServers,proto3" json:"old_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{6}
}

func (x *Configuration) GetServers() []*ServerConfig {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Configuration) GetIsJoint() bool {
	if x != nil {
		return x.IsJoint
	}
	return false
}

func (x *Configuration) GetOldServers() []*ServerConfig {
	if x != nil {
		return x.OldServers
	}
	return nil
}

// AddServer RPC request (Section 6)
type AddServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new server to add
	ServerId string `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// Network address of the new server
	ServerAddress string `protobuf:"bytes,2,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddServerRequest) Reset() {
	*x = AddServerRequest{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServerRequest) ProtoMessage() {}

func (x *AddServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServerRequest.ProtoReflect.Descriptor instead.
func (*AddServerRequest) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{7}
}

func (x *AddServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AddServerRequest) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

// AddServer RPC response (Section 6)
type AddServerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the configuration change
	Status ConfigChangeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.ConfigChangeStatus" json:"status,omitempty"`
	// ID of the current leader (for client redirection if not leader)
	LeaderId      string `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddServerResponse) Reset() {
	*x = AddServerResponse{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServerResponse) ProtoMessage() {}

func (x *AddServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServerResponse.ProtoReflect.Descriptor instead.
func (*AddServerResponse) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{8}
}

func (x *AddServerResponse) GetStatus() ConfigChangeStatus {
	if x != nil {
		return x.Status
	}
	return ConfigChangeStatus_OK
}

func (x *AddServerResponse) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

// RemoveServer RPC request (Section 6)
type RemoveServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the server to remove
	ServerId      string `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveServerRequest) Reset() {
	*x = RemoveServerRequest{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServerRequest) ProtoMessage() {}

func (x *RemoveServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServerRequest.ProtoReflect.Descriptor instead.
func (*RemoveServerRequest) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

// RemoveServer RPC response (Section 6)
type RemoveServerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the configuration change
	Status ConfigChangeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.ConfigChangeStatus" json:"status,omitempty"`
	// ID of the current leader (for client redirection if not leader)
	LeaderId      string `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveServerResponse) Reset() {
	*x = RemoveServerResponse{}
	mi := &file_internal_raft_proto_raft_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServerResponse) ProtoMessage() {}

func (x *RemoveServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_proto_raft_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServerResponse.ProtoReflect.Descriptor instead.
func (*RemoveServerResponse) Descriptor() ([]byte, []int) {
	return file_internal_raft_proto_raft_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveServerResponse) GetStatus() ConfigChangeStatus {
	if x != nil {
		return x.Status
	}
	return ConfigChangeStatus_OK
}

func (x *RemoveServerResponse) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

var File_internal_raft_proto_raft_proto protoreflect.FileDescriptor

const file_internal_raft_proto_raft_proto_rawDesc = "" +
	"\n" +
	"\x1einternal/raft/proto/raft.proto\x12\x05proto\"\x95\x01\n" +
	"\x12RequestVoteRequest\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12!\n" +
	"\fcandidate_id\x18\x02 \x01(\tR\vcandidateId\x12$\n" +
	"\x0elast_log_index\x18\x03 \x01(\x04R\flastLogIndex\x12\"\n" +
	"\rlast_log_term\x18\x04 \x01(\x04R\vlastLogTerm\"L\n" +
	"\x13RequestVoteResponse\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12!\n" +
	"\fvote_granted\x18\x02 \x01(\bR\vvoteGranted\"\xe1\x01\n" +
	"\x14AppendEntriesRequest\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x1b\n" +
	"\tleader_id\x18\x02 \x01(\tR\bleaderId\x12$\n" +
	"\x0eprev_log_index\x18\x03 \x01(\x04R\fprevLogIndex\x12\"\n" +
	"\rprev_log_term\x18\x04 \x01(\x04R\vprevLogTerm\x12)\n" +
	"\aentries\x18\x05 \x03(\v2\x0f.proto.LogEntryR\aentries\x12#\n" +
	"\rleader_commit\x18\x06 \x01(\x04R\fleaderCommit\"E\n" +
	"\x15AppendEntriesResponse\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\"\xb3\x01\n" +
	"\bLogEntry\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x18\n" +
	"\acommand\x18\x02 \x01(\fR\acommand\x12\x14\n" +
	"\x05index\x18\x03 \x01(\x04R\x05index\x12'\n" +
	"\x04type\x18\x04 \x01(\x0e2\x13.proto.LogEntryTypeR\x04type\x12:\n" +
	"\rconfiguration\x18\x05 \x01(\v2\x14.proto.ConfigurationR\rconfiguration\"8\n" +
	"\fServerConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"\x8f\x01\n" +
	"\rConfiguration\x12-\n" +
	"\aservers\x18\x01 \x03(\v2\x13.proto.ServerConfigR\aservers\x12\x19\n" +
	"\bis_joint\x18\x02 \x01(\bR\aisJoint\x124\n" +
	"\vold_servers\x18\x03 \x03(\v2\x13.proto.ServerConfigR\n" +
	"oldServers\"V\n" +
	"\x10AddServerRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12%\n" +
	"\x0eserver_address\x18\x02 \x01(\tR\rserverAddress\"c\n" +
	"\x11AddServerResponse\x121\n" +
	"\x06status\x18\x01 \x01(\x0e2\x19.proto.ConfigChangeStatusR\x06status\x12\x1b\n" +
	"\tleader_id\x18\x02 \x01(\tR\bleaderId\"2\n" +
	"\x13RemoveServerRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\"f\n" +
	"\x14RemoveServerResponse\x121\n" +
	"\x06status\x18\x01 \x01(\x0e2\x19.proto.ConfigChangeStatusR\x06status\x12\x1b\n" +
	"\tleader_id\x18\x02 \x01(\tR\bleaderId*6\n" +
	"\fLogEntryType\x12\x0f\n" +
	"\vLOG_COMMAND\x10\x00\x12\x15\n" +
	"\x11LOG_CONFIGURATION\x10\x01*J\n" +
	"\x12ConfigChangeStatus\x12\x06\n" +
	"\x02OK\x10\x00\x12\x0e\n" +
	"\n" +
	"NOT_LEADER\x10\x01\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x02\x12\v\n" +
	"\aTIMEOUT\x10\x032\xa8\x02\n" +
	"\vRaftService\x12D\n" +
	"\vRequestVote\x12\x19.proto.RequestVoteRequest\x1a\x1a.proto.RequestVoteResponse\x12J\n" +
	"\rAppendEntries\x12\x1b.proto.AppendEntriesRequest\x1a\x1c.proto.AppendEntriesResponse\x12>\n" +
	"\tAddServer\x12\x17.proto.AddServerRequest\x1a\x18.proto.AddServerResponse\x12G\n" +
	"\fRemoveServer\x12\x1a.proto.RemoveServerRequest\x1a\x1b.proto.RemoveServerResponseB-Z+aubg-cos-senior-project/internal/raft/protob\x06proto3"

var (
	file_internal_raft_proto_raft_proto_rawDescOnce sync.Once
	file_internal_raft_proto_raft_proto_rawDescData []byte
)

func file_internal_raft_proto_raft_proto_rawDescGZIP() []byte {
	file_internal_raft_proto_raft_proto_rawDescOnce.Do(func() {
		file_internal_raft_proto_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_raft_proto_raft_proto_rawDesc), len(file_internal_raft_proto_raft_proto_rawDesc)))
	})
	return file_internal_raft_proto_raft_proto_rawDescData
}

var file_internal_raft_proto_raft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internal_raft_proto_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_internal_raft_proto_raft_proto_goTypes = []any{
	(LogEntryType)(0),             // 0: proto.LogEntryType
	(ConfigChangeStatus)(0),       // 1: proto.ConfigChangeStatus
	(*RequestVoteRequest)(nil),    // 2: proto.RequestVoteRequest
	(*RequestVoteResponse)(nil),   // 3: proto.RequestVoteResponse
	(*AppendEntriesRequest)(nil),  // 4: proto.AppendEntriesRequest
	(*AppendEntriesResponse)(nil), // 5: proto.AppendEntriesResponse
	(*LogEntry)(nil),              // 6: proto.LogEntry
	(*ServerConfig)(nil),          // 7: proto.ServerConfig
	(*Configuration)(nil),         // 8: proto.Configuration
	(*AddServerRequest)(nil),      // 9: proto.AddServerRequest
	(*AddServerResponse)(nil),     // 10: proto.AddServerResponse
	(*RemoveServerRequest)(nil),   // 11: proto.RemoveServerRequest
	(*RemoveServerResponse)(nil),  // 12: proto.RemoveServerResponse
}
var file_internal_raft_proto_raft_proto_depIdxs = []int32{
	6,  // 0: proto.AppendEntriesRequest.entries:type_name -> proto.LogEntry
	0,  // 1: proto.LogEntry.type:type_name -> proto.LogEntryType
	8,  // 2: proto.LogEntry.configuration:type_name -> proto.Configuration
	7,  // 3: proto.Configuration.servers:type_name -> proto.ServerConfig
	7,  // 4: proto.Configuration.old_servers:type_name -> proto.ServerConfig
	1,  // 5: proto.AddServerResponse.status:type_name -> proto.ConfigChangeStatus
	1,  // 6: proto.RemoveServerResponse.status:type_name -> proto.ConfigChangeStatus
	2,  // 7: proto.RaftService.RequestVote:input_type -> proto.RequestVoteRequest
	4,  // 8: proto.RaftService.AppendEntries:input_type -> proto.AppendEntriesRequest
	9,  // 9: proto.RaftService.AddServer:input_type -> proto.AddServerRequest
	11, // 10: proto.RaftService.RemoveServer:input_type -> proto.RemoveServerRequest
	3,  // 11: proto.RaftService.RequestVote:output_type -> proto.RequestVoteResponse
	5,  // 12: proto.RaftService.AppendEntries:output_type -> proto.AppendEntriesResponse
	10, // 13: proto.RaftService.AddServer:output_type -> proto.AddServerResponse
	12, // 14: proto.RaftService.RemoveServer:output_type -> proto.RemoveServerResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_internal_raft_proto_raft_proto_init() }
func file_internal_raft_proto_raft_proto_init() {
	if File_internal_raft_proto_raft_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_raft_proto_raft_proto_rawDesc), len(file_internal_raft_proto_raft_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_raft_proto_raft_proto_goTypes,
		DependencyIndexes: file_internal_raft_proto_raft_proto_depIdxs,
		EnumInfos:         file_internal_raft_proto_raft_proto_enumTypes,
		MessageInfos:      file_internal_raft_proto_raft_proto_msgTypes,
	}.Build()
	File_internal_raft_proto_raft_proto = out.File
	file_internal_raft_proto_raft_proto_goTypes = nil
	file_internal_raft_proto_raft_proto_depIdxs = nil
}
