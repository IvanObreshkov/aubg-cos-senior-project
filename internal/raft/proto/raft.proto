syntax = "proto3";

package proto;

/*
To generate .pb.go files run `protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative internal/raft/proto/raft.proto` from the root directory
 */

// The go_package option in Protocol Buffers specifies the Go import path for the generated Go code from this protobuf
// file.
// https://stackoverflow.com/questions/66321215/what-is-the-go-package-option-used-for-in-a-protocol-buffer-file
option go_package = "aubg-cos-senior-project/internal/raft/proto";


// RequestVote RPC arguments as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message RequestVoteRequest {
  // candidate's term
  uint64 term = 1;
  // candidate requesting vote
  string candidate_id = 2;
  // index of candidate's last log entry (Section 5.4)
  uint64 last_log_index = 3;
  // term of candidate's last log entry (Section 5.4)
  uint64 last_log_term = 4;
}

// RequestVote RPC response as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message RequestVoteResponse {
  // currentTerm, for candidate to update itself
  uint64 term = 1;
  // true means candidate received vote
  bool vote_granted = 2;
}

// AppendEntries RPC arguments as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message AppendEntriesRequest {
  // leader's term
  uint64 term = 1;
  // so follower can redirect clients
  string leader_id = 2;
  // index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;
  // term of prev_log_index entry
  uint64 prev_log_term = 4;
  // log entries to store (empty for heartbeat; may send more than one for efficiency)
  repeated LogEntry entries = 5;
  // leader's commit_index
  uint64 leader_commit = 6;
}

// AppendEntries RPC response as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message AppendEntriesResponse {
  // currentTerm, for leader to update itself
  uint64 term = 1;
  // true if follower contained entry matching prev_log_index and prev_log_term
  bool success = 2;
}

// Log entry as per Figure 2 in the [Raft paper](https://raft.github.io/raft.pdf)
message LogEntry {
  // term when entry was received by leader
  uint64 term = 1;
  // command for state machine
  bytes command = 2;
  // index of the entry in the log
  uint64 index = 3;
  // type of log entry (command, configuration, etc.)
  LogEntryType type = 4;
  // configuration data (only populated when type is LOG_CONFIGURATION)
  Configuration configuration = 5;
}

// Type of log entry
enum LogEntryType {
  // Regular command for state machine
  LOG_COMMAND = 0;
  // Configuration change entry (Section 6)
  LOG_CONFIGURATION = 1;
}

// Server configuration entry (Section 6: Cluster membership changes)
message ServerConfig {
  // unique server identifier
  string id = 1;
  // network address of the server
  string address = 2;
}

// Cluster configuration (Section 6: Cluster membership changes)
message Configuration {
  // List of servers in the configuration
  repeated ServerConfig servers = 1;
  // Whether this is a joint consensus configuration (C_old,new)
  bool is_joint = 2;
  // If is_joint is true, this contains the old configuration servers
  repeated ServerConfig old_servers = 3;
}

// ClientCommand RPC request (Section 5.3: client interaction)
message ClientCommandRequest {
  // The command to be replicated and applied
  bytes command = 1;
}

// ClientCommand RPC response
message ClientCommandResponse {
  // Whether the command was successfully committed
  bool success = 1;
  // The log index where the command was committed (if successful)
  uint64 index = 2;
  // The ID of the current leader (for client redirection if this server is not the leader)
  string leader_id = 3;
}

// GetServerState RPC request (for debugging/demo)
message GetServerStateRequest {
}

// GetServerState RPC response
message GetServerStateResponse {
  // Server ID
  string server_id = 1;
  // Current term
  uint64 current_term = 2;
  // Server state (Follower, Candidate, Leader)
  string state = 3;
  // Last log index
  uint64 last_log_index = 4;
  // Commit index
  uint64 commit_index = 5;
  // Last applied index
  uint64 last_applied = 6;
  // Leader ID (if known)
  string leader_id = 7;
  // Number of log entries
  uint64 log_entries_count = 8;
}


// AddServer RPC request (Section 6)
message AddServerRequest {
  // ID of the new server to add
  string server_id = 1;
  // Network address of the new server
  string server_address = 2;
}

// AddServer RPC response (Section 6)
message AddServerResponse {
  // Status of the configuration change
  ConfigChangeStatus status = 1;
  // ID of the current leader (for client redirection if not leader)
  string leader_id = 2;
}

// RemoveServer RPC request (Section 6)
message RemoveServerRequest {
  // ID of the server to remove
  string server_id = 1;
}

// RemoveServer RPC response (Section 6)
message RemoveServerResponse {
  // Status of the configuration change
  ConfigChangeStatus status = 1;
  // ID of the current leader (for client redirection if not leader)
  string leader_id = 2;
}

// Status of a configuration change operation
enum ConfigChangeStatus {
  // Configuration change succeeded
  OK = 0;
  // Not the leader, cannot process configuration change
  NOT_LEADER = 1;
  // Configuration change already in progress
  IN_PROGRESS = 2;
  // Configuration change timeout
  TIMEOUT = 3;
}

// A contract between the gRPC Server and Client
service RaftService {
  // RequestVote RPC (Section 5.2 from the [Raft paper](https://raft.github.io/raft.pdf))
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  // AppendEntries RPC (Section 5.3 from the [Raft paper](https://raft.github.io/raft.pdf))
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // ClientCommand RPC allows clients to submit commands to the Raft cluster (Section 5.3)
  rpc ClientCommand(ClientCommandRequest) returns (ClientCommandResponse);

  // GetServerState RPC allows clients to query server state for debugging/demo
  rpc GetServerState(GetServerStateRequest) returns (GetServerStateResponse);

  // AddServer RPC (Section 6 from the [Raft paper](https://raft.github.io/raft.pdf))
  // Adds a new server to the cluster configuration
  rpc AddServer(AddServerRequest) returns (AddServerResponse);

  // RemoveServer RPC (Section 6 from the [Raft paper](https://raft.github.io/raft.pdf))
  // Removes a server from the cluster configuration
  rpc RemoveServer(RemoveServerRequest) returns (RemoveServerResponse);
}

